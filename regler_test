import rclpy
from rclpy.node import Node
from ro45_portalrobot_interfaces.msg import RobotPos, RobotCmd
from object_interfaces.msg import ObjectData
from std_msgs.msg import Float64
import time
import unittest

class TestRegelungsNode(unittest.TestCase):

    def setUp(self):
        rclpy.init(args=None)
        self.node = RegelungsNode()

    def tearDown(self):
        rclpy.shutdown()

    def test_initial_state(self):
        self.assertEqual(self.node.state, self.node.INIT_STATE)
    
    def test_transition_to_idle_state(self):
        self.node.arm_position_callback(RobotPos(pos_x=0, pos_y=0, pos_z=0))
        self.assertEqual(self.node.state, self.node.IDLE_STATE)
    
    def test_transition_to_ziel_state(self):
        self.node.queue.append({'x': 1, 'y': 1, 'z': 1, 'class': 'test'})
        self.node.state = self.node.IDLE_STATE
        self.node.go_to_target_position()
        self.assertEqual(self.node.state, self.node.ZIEL_STATE)
    
    def test_transition_to_pick_up_state(self):
        self.node.state = self.node.ZIEL_STATE
        self.node.target_position = self.node.robot_pos
        self.node.go_to_target_position()
        self.assertEqual(self.node.state, self.node.PICK_UP_STATE)
    
    def test_transition_to_los_state(self):
        self.node.state = self.node.PICK_UP_STATE
        self.node.go_to_target_position()
        self.assertEqual(self.node.state, self.node.LOS_STATE)
    
    def test_transition_to_default_state(self):
        self.node.state = self.node.LOS_STATE
        self.node.go_to_target_position()
        self.assertEqual(self.node.state, self.node.DEFAULT_STATE)
    
    def test_emergency_state(self):
        self.node.emergency_case("Test Emergency")
        self.assertEqual(self.node.state, self.node.EMERGENCY_STATE)
        self.node.emergency = False
        self.node.go_to_target_position()
        self.assertEqual(self.node.state, self.node.IDLE_STATE)

    def test_regler_function(self):
        self.node.target_position = {'x': 5, 'y': 5, 'z': 5}
        self.node.robot_pos = {'x': 0, 'y': 0, 'z': 0}
        self.node.regler()
        self.assertNotEqual(self.node.robot_pos, {'x': 0, 'y': 0, 'z': 0})

    def test_calculate_target_position(self):
        self.node.oldest_object = {'x': 1, 'y': 1, 'class': 'cat', 'timestamp': time.time()}
        self.node.velocity = 1
        self.node.calculate_target_position()
        self.assertEqual(self.node.target_position['x'], 1 + self.node.velocity * (time.time() - self.node.oldest_object['timestamp']))
        self.assertEqual(self.node.target_position['y'], 1)
        self.assertEqual(self.node.target_position['z'], self.node.pick_up_z)

if __name__ == '__main__':
    unittest.main()
